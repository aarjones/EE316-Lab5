/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "PWM.h"
#include "xsysmon.h"
#include "xparameters.h"
#include "sleep.h"
#include "stdio.h"
#include "xgpio.h"
#include "xil_types.h"
#include "xtmrctr.h"
#include "xil_exception.h"
#include "xscugic.h"

//Button Interrupts
#define GPIO_DEVICE_ID		    XPAR_GPIO_0_DEVICE_ID
#define GPIO_CHANNEL1     		1
#define INTC_GPIO_INTERRUPT_ID	XPAR_FABRIC_AXI_GPIO_0_IP2INTC_IRPT_INTR
#define INTC_DEVICE_ID	        XPAR_SCUGIC_SINGLE_DEVICE_ID
#define GPIO_ALL_BUTTONS	    0xFFFF
#define BTN_0 0x0001
#define BTN_1 0x0002
#define BTN_2 0x0004
#define NO_BUTTONS 0x0000
#define BUTTON_CHANNEL	 1	/* Channel 1 of the GPIO Device */
#define BUTTON_INTERRUPT XGPIO_IR_CH1_MASK  /* Channel 1 Interrupt Mask */
#define INTERRUPT_CONTROL_VALUE 0x7
#define INTC_DEVICE_ID	XPAR_SCUGIC_SINGLE_DEVICE_ID
#define INTC		XScuGic
#define INTC_HANDLER	XScuGic_InterruptHandler

//LCD
#define LCD_GPIO XPAR_GPIO_1_DEVICE_ID
#define LCD_RS 0b100000
#define LCD_EN 0b010000
#define LCD_DATA 0x0f

//AXI PWM
#define TMRCTR_DEVICE_ID        XPAR_TMRCTR_0_DEVICE_ID
#define PWM_PERIOD              200000 //consider adding additional 0 to go back to previous

//Digilent PWM
#define READDATA_DBG 0
#define NUMBER_OF_CHANNELS 3
#define SERVO_BASE_ADDR XPAR_PWM_0_PWM_AXI_BASEADDR
#define BUZZER_BASE_ADDR XPAR_PWM_1_PWM_AXI_BASEADDR

//XADC
#define XADC_CHANNELS 0xB3630008
#define XADC_DEVICE_ID XPAR_XADC_WIZ_0_DEVICE_ID
#define XADC_SEQ_CHANNELS 0xB3630800
#define Test_Bit(VEC,BIT) ((VEC&(1<<BIT))!=0)
#define READ_POT 1
#define READ_LDR 2

// Functions XADC
void Xadc_Init(XSysMon *InstancePtr, u32 DeviceId);
u32 Xadc_ReadData (XSysMon *InstancePtr, u16 RawData[32]);
float Xadc_RawToVoltage(u16 Data, u8 Channel);
void Xadc_Demo(XSysMon *InstancePtr, u32 RGBLED_BaseAddr, u32 ChannelSelect);
float fixNegatives(float orig);
float xadc_readFull(XSysMon *InstancePtr, u32 channelSelect);

// Functions PWM
int StartPWM(float xadcVoltage);
void setBuzzerPWM(float xadcVoltage);
void setServoPWM(float xadcVoltage);
void resetPWMs();
void setPWMs(float voltage);

// Functions GPIO Interrupt
int GpioIntrExample(INTC *IntcInstancePtr, XGpio *InstancePtr, u16 DeviceId, u16 IntrId, u16 IntrMask, u32 *DataRead);
int GpioSetupIntrSystem(INTC *IntcInstancePtr, XGpio *InstancePtr, u16 DeviceId, u16 IntrId, u16 IntrMask);
void GpioHandler(void *CallBackRef);
void GpioDisableIntr(INTC *IntcInstancePtr, XGpio *InstancePtr, u16 IntrId, u16 IntrMask);
void GpioInterruptEnable(INTC *IntcInstancePtr, XGpio *InstancePtr, u16 DeviceId, u16 IntrId, u16 IntrMask);

// LCD
void LCD_nibble_write(char data, unsigned char control);
void LCD_command(unsigned char command);
void LCD_data(char data);
void LCD_init(void);
void LCD_write_str(char* string);

// Variables XADC
const u8 Channel_List[NUMBER_OF_CHANNELS] = {
		3,
		17, 25
};
const char *Channel_Names[32] = {
	"", "", "", "VP-VN",
	"", "", "", "",
	"", "", "", "",
	"", "", "", "",
	"A8-A9", "A0", "", "",
	"", "A4", "A2", "",
	"A10-A11", "A1", "", "",
	"A6-A7", "A5", "", "A3"
};

// Variables AXI Timer
XTmrCtr TimerCounterInst;

// Variables GPIO
XGpio Gpio; /* The Instance of the GPIO Driver */
INTC Intc; /* The Instance of the Interrupt Controller Driver */
static u16 GlobalIntrMask; /* GPIO channel mask that is needed by the Interrupt Handler */

// Variables General
enum modes {Reset, DisabledPot, DisabledLDR, EnabledPot, EnabledLDR} currentMode;

int main()
{
    init_platform();

    /* ****** Variable Setup ******* */
    XSysMon Xadc;
	float xadc_voltageData;
	currentMode = EnabledPot;

	/* ****** Initialize things ******* */
	//XADC
	Xadc_Init(&Xadc, XADC_DEVICE_ID);

	//PWM for Buzzer
	PWM_Set_Period(BUZZER_BASE_ADDR, 65535);
	PWM_Enable(BUZZER_BASE_ADDR);

	//PWM for Servo
	PWM_Set_Period(SERVO_BASE_ADDR, 1000000);
	PWM_Enable(SERVO_BASE_ADDR);

	//Button interrupts
	GpioInterruptEnable(&Intc, &Gpio, GPIO_DEVICE_ID, INTC_GPIO_INTERRUPT_ID, GPIO_CHANNEL1);

	//LCD
	LCD_init();
	//LCD_write_str("Hello");

	printf("About to begin wondrous things\r\n");

	while(1) {
		switch(currentMode) {
			case Reset:
				//Display Reset on the LCD
				//Set all PWMs to 0 duty cycle
				printf("Reset Mode\r\n");
				resetPWMs();
				break;
			case EnabledPot:
				//Display Enabled\nPotentiometer on the LCD
				//Read xadc from Pot
				//Run all pwms
				//printf("Enabled, Potentiometer\r\n");
				xadc_voltageData = xadc_readFull(&Xadc, Channel_List[READ_POT]);
				setPWMs(xadc_voltageData);
				break;
			case EnabledLDR:
				//Display Enabled\nLDR on the LCD
				//Read xadc from LDR
				//Run all pwms
				printf("Enabled, LDR\r\n");
				xadc_voltageData = xadc_readFull(&Xadc, Channel_List[READ_LDR]);
				setPWMs(xadc_voltageData);
				break;
			case DisabledPot:
				//Display Disabled\nPotentiometer on the LCD
				//Set all PWMs to 0 duty cycle
				printf("Disabled, Potentiometer\r\n");
				resetPWMs();
				break;
			case DisabledLDR:
				//Display Disabled\nLDR on the LCD
				//Set all PWMs to 0 duty cycle
				printf("Disabled, LDR\r\n");
				resetPWMs();
				break;
			default: 
				break;
		}

		/*
		//vars setup
		u32 channelSelect = Channel_List[ChannelIndex];

		//read ADC
		xadc_voltageData = xadc_readFull(&Xadc, channelSelect);

		//Deal with Buzzer PWM
		setBuzzerPWM(xadc_voltageData);
		setServoPWM(xadc_voltageData);
		StartPWM(xadc_voltageData);
		*/

		//sleep for 150 ms
		usleep(150 * 1000);

		//sleep for 50 ms
		//usleep(50 * 1000);
	}

    cleanup_platform();
    return 0;
}

void LCD_write_str(char* string) {
	//LCD_command(0x01);
	for(int i = 0; i <= sizeof(string)/sizeof(string[0]); i++)
		LCD_data(string[i]);
}

void LCD_init(void) {
	printf("start of init\r\n");

	XGpio_Initialize(&Gpio, LCD_GPIO);


    usleep(20 * 1000);                /* LCD controller reset sequence */
    LCD_nibble_write(0x30, 0);
    usleep(5 * 1000);
    LCD_nibble_write(0x30, 0);
    usleep(1 * 1000);
    LCD_nibble_write(0x30, 0);
    usleep(1 * 1000);

    LCD_nibble_write(0x20, 0);;  /* use 4-bit data mode */
    usleep(1 * 1000);
    LCD_command(0x28);          /* set 4-bit data, 2-line, 5x7 font */
    LCD_command(0x06);          /* move cursor right */
    LCD_command(0x01);          /* clear screen, move cursor to home */
    LCD_command(0x0F);          /* turn on display, cursor blinking */

    printf("end of init\r\n");
}

void LCD_nibble_write(char data, unsigned char control) {
    /* populate data bits */
	u32 to_write = 0;

	to_write |= (data >> 4);
	to_write |= (control << 5);
	//printf("%x ", data >> 4);
	printf("%x ", to_write);
	XGpio_DiscreteWrite(&Gpio, LCD_GPIO, to_write);
	usleep(50);

	to_write |= (1 << 4);

	printf("%x ", to_write);
	XGpio_DiscreteWrite(&Gpio, LCD_GPIO, to_write);
	usleep(50);

	to_write = 0;
	to_write |= (data >> 4);
	to_write |= (control << 5);

	//printf("%x\r\n", to_write);
	XGpio_DiscreteWrite(&Gpio, LCD_GPIO, to_write);
	usleep(50);
    //GPIOC->BSRR = 0x00F00000;       /* clear data bits */
    //GPIOC->BSRR = data & 0xF0;      /* set data bits */

    /* set R/S bit */
    /*if (control & RS)
        GPIOB->BSRR = RS;
    else
        GPIOB->BSRR = RS << 16;*/

    /* pulse E */
}

void LCD_command(unsigned char command) {
    LCD_nibble_write(command & 0xF0, 0);    /* upper nibble first */
    LCD_nibble_write(command << 4, 0);      /* then lower nibble */

    if (command < 4)
        usleep(2 * 1000);         /* command 1 and 2 needs up to 1.64ms */
    else
        usleep(1 * 1000);         /* all others 40 us */
}

void LCD_data(char data) {
    LCD_nibble_write(data & 0xF0, 1);      /* upper nibble first */
    //usleep(200);
    LCD_nibble_write(data << 4, 1);        /* then lower nibble */

    usleep(1 * 1000);
}

void resetPWMs() {
	XTmrCtr_PwmDisable(&TimerCounterInst);
	PWM_Set_Duty(SERVO_BASE_ADDR, 0, 0);
	PWM_Set_Duty(BUZZER_BASE_ADDR, 0, 0);
}

void setPWMs(float voltage) {
	setBuzzerPWM(voltage);
	setServoPWM(voltage);
	StartPWM(voltage);
}

void GpioInterruptEnable(INTC *IntcInstancePtr, XGpio* InstancePtr, u16 DeviceId, u16 IntrId, u16 IntrMask)
{
	/* Initialize the GPIO driver. If an error occurs then exit */
	XGpio_Initialize(InstancePtr, DeviceId);
	GpioSetupIntrSystem(IntcInstancePtr, InstancePtr, DeviceId, IntrId, IntrMask);
}

int GpioSetupIntrSystem(INTC *IntcInstancePtr, XGpio *InstancePtr, u16 DeviceId, u16 IntrId, u16 IntrMask)
{
	int Result;

	GlobalIntrMask = IntrMask;

#ifdef XPAR_INTC_0_DEVICE_ID

#ifndef TESTAPP_GEN
	/*
	 * Initialize the interrupt controller driver so that it's ready to use.
	 * specify the device ID that was generated in xparameters.h
	 */
	Result = XIntc_Initialize(IntcInstancePtr, INTC_DEVICE_ID);
	if (Result != XST_SUCCESS) {
		return Result;
	}
#endif /* TESTAPP_GEN */

	/* Hook up interrupt service routine */
	XIntc_Connect(IntcInstancePtr, IntrId,
		      (Xil_ExceptionHandler)GpioHandler, InstancePtr);

	/* Enable the interrupt vector at the interrupt controller */
	XIntc_Enable(IntcInstancePtr, IntrId);

#ifndef TESTAPP_GEN
	/*
	 * Start the interrupt controller such that interrupts are recognized
	 * and handled by the processor
	 */
	Result = XIntc_Start(IntcInstancePtr, XIN_REAL_MODE);
	if (Result != XST_SUCCESS) {
		return Result;
	}
#endif /* TESTAPP_GEN */

#else /* !XPAR_INTC_0_DEVICE_ID */

#ifndef TESTAPP_GEN
	XScuGic_Config *IntcConfig;

	/*
	 * Initialize the interrupt controller driver so that it is ready to
	 * use.
	 */
	IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
	if (NULL == IntcConfig) {
		return XST_FAILURE;
	}

	Result = XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig,
					IntcConfig->CpuBaseAddress);
	if (Result != XST_SUCCESS) {
		return XST_FAILURE;
	}
#endif /* TESTAPP_GEN */

	XScuGic_SetPriorityTriggerType(IntcInstancePtr, IntrId,
					0xA0, 0x3);

	/*
	 * Connect the interrupt handler that will be called when an
	 * interrupt occurs for the device.
	 */
	Result = XScuGic_Connect(IntcInstancePtr, IntrId,
				 (Xil_ExceptionHandler)GpioHandler, InstancePtr);
	if (Result != XST_SUCCESS) {
		return Result;
	}

	/* Enable the interrupt for the GPIO device.*/
	XScuGic_Enable(IntcInstancePtr, IntrId);
#endif /* XPAR_INTC_0_DEVICE_ID */

	/*
	 * Enable the GPIO channel interrupts so that push button can be
	 * detected and enable interrupts for the GPIO device
	 */
	XGpio_InterruptEnable(InstancePtr, IntrMask);
	XGpio_InterruptGlobalEnable(InstancePtr);

	/*
	 * Initialize the exception table and register the interrupt
	 * controller handler with the exception table
	 */
	Xil_ExceptionInit();

	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			 (Xil_ExceptionHandler)INTC_HANDLER, IntcInstancePtr);

	/* Enable non-critical exceptions */
	Xil_ExceptionEnable();

	return XST_SUCCESS;
}

void GpioHandler(void *CallbackRef)
{
	u32 dataRead;
	XGpio *GpioPtr = (XGpio *)CallbackRef;

	dataRead = XGpio_DiscreteRead(GpioPtr, BUTTON_CHANNEL);

	switch(dataRead) {
	case BTN_0:
		//printf("BTN0\r\n");
		currentMode = Reset;
		break;
	case BTN_1:
		//printf("BTN1\r\n");
		if     (currentMode == EnabledLDR)
			currentMode = EnabledPot;
		else if(currentMode == EnabledPot)
			currentMode = EnabledLDR;
		else if(currentMode == DisabledPot)
			currentMode = DisabledLDR;
		else if(currentMode == DisabledLDR) 
			currentMode = DisabledPot;
		break;
	case BTN_2:
		//printf("BTN2\r\n");
		if(currentMode == EnabledLDR)
			currentMode = DisabledLDR;
		else if(currentMode == EnabledPot)
			currentMode = DisabledPot;
		else if(currentMode == DisabledLDR)
			currentMode = EnabledLDR;
		else if(currentMode == DisabledPot)
			currentMode = EnabledPot;
		break;
	case NO_BUTTONS:
		//printf("Button Released\r\n");
		if(currentMode == Reset) {
			currentMode = EnabledPot;
		}
		break;
	default:
		printf("Unknown Button\r\n");
		break;
	}

	/* Clear the Interrupt */
	XGpio_InterruptClear(GpioPtr, GlobalIntrMask);

}

void GpioDisableIntr(INTC *IntcInstancePtr, XGpio *InstancePtr, u16 IntrId, u16 IntrMask)
{
	XGpio_InterruptDisable(InstancePtr, IntrMask);
#ifdef XPAR_INTC_0_DEVICE_ID
	XIntc_Disable(IntcInstancePtr, IntrId);
#else
	/* Disconnect the interrupt */
	XScuGic_Disable(IntcInstancePtr, IntrId);
	XScuGic_Disconnect(IntcInstancePtr, IntrId);
#endif
	return;
}

int StartPWM(float xadcVoltage){
	int Status;

	/*
	* Initialize the timer counter so that it's ready to use,
	* specify the device ID that is generated in xparameters.h
	*/
	Status = XTmrCtr_Initialize(&TimerCounterInst, XPAR_TMRCTR_0_DEVICE_ID);
	if (Status != XST_SUCCESS) {
		printf("failure\r\n");
		return XST_FAILURE;
	}

	int duty = (xadcVoltage / 1.650) * PWM_PERIOD;

	/* Disable PWM for reconfiguration */
	XTmrCtr_PwmDisable(&TimerCounterInst);
	int speed = XTmrCtr_PwmConfigure(&TimerCounterInst, PWM_PERIOD, duty);

	/* Enable PWM */
    XTmrCtr_PwmEnable(&TimerCounterInst);
    //printf("enabled: %u\r\n", speed);


    return 0;
}

void setServoPWM(float xadcVoltage) {
	int pwmHigh = (2.5 + ((10/1.650) * xadcVoltage)) * 10000;
	PWM_Set_Duty(SERVO_BASE_ADDR, pwmHigh, 0);
}

void setBuzzerPWM(float xadcVoltage) {
	int pwmPeriod = (int)(xadcVoltage / 1.650 * 65535) + 65535/12;
	PWM_Set_Period(BUZZER_BASE_ADDR, pwmPeriod);
	PWM_Set_Duty(BUZZER_BASE_ADDR, pwmPeriod / 2, 0);
}

float xadc_readFull(XSysMon *InstancePtr, u32 channelSelect) {
	u16 Xadc_RawData[32];
	u32 ChannelValidVector;
	float Xadc_VoltageData;

	ChannelValidVector = Xadc_ReadData(InstancePtr, Xadc_RawData);
	if (Test_Bit(ChannelValidVector, channelSelect)) {
		Xadc_VoltageData = fixNegatives(Xadc_RawToVoltage(Xadc_RawData[channelSelect], channelSelect));
		//printf("Analog Input %s: %.3fV\r\n", Channel_Names[channelSelect], Xadc_VoltageData);
	} else {
		//printf("Channel %d (%s) Not Available\r\n", (int)channelSelect, Channel_Names[channelSelect]);
	}
	return Xadc_VoltageData;
}

void Xadc_Init(XSysMon *InstancePtr, u32 DeviceId) {
	XSysMon_Config *ConfigPtr;
	ConfigPtr = XSysMon_LookupConfig(DeviceId);
	XSysMon_CfgInitialize(InstancePtr, ConfigPtr, ConfigPtr->BaseAddress);

	// Disable the Channel Sequencer before configuring the Sequence registers.
	XSysMon_SetSequencerMode(InstancePtr, XSM_SEQ_MODE_SAFE);
	// Disable all alarms
	XSysMon_SetAlarmEnables(InstancePtr, 0x0);
	// Set averaging for all channels to 16 samples
	XSysMon_SetAvg(InstancePtr, XSM_AVG_16_SAMPLES);
	// Set differential input mode for all channels
	XSysMon_SetSeqInputMode(InstancePtr, XADC_SEQ_CHANNELS);
	// Set 6ADCCLK acquisition time in all channels
	XSysMon_SetSeqAcqTime(InstancePtr, XADC_SEQ_CHANNELS);
	// Disable averaging in all channels
	XSysMon_SetSeqAvgEnables(InstancePtr, XADC_SEQ_CHANNELS);
	// Enable all channels
	XSysMon_SetSeqChEnables(InstancePtr, XADC_SEQ_CHANNELS);
	// Set the ADCCLK frequency equal to 1/32 of System clock
	XSysMon_SetAdcClkDivisor(InstancePtr, 32);
	// Enable Calibration
	XSysMon_SetCalibEnables(InstancePtr, XSM_CFR1_CAL_PS_GAIN_OFFSET_MASK | XSM_CFR1_CAL_ADC_GAIN_OFFSET_MASK);
	// Enable the Channel Sequencer in continuous sequencer cycling mode
	XSysMon_SetSequencerMode(InstancePtr, XSM_SEQ_MODE_CONTINPASS);
	// Clear the old status
//	XSysMon_GetStatus(InstancePtr);
}

u32 Xadc_ReadData (XSysMon *InstancePtr, u16 RawData[32])
{
	u8 Channel;

	if (READDATA_DBG != 0)
		xil_printf("Waiting for EOS...\r\n");

	// Clear the Status
	XSysMon_GetStatus(InstancePtr);
	// Wait until the End of Sequence occurs
	while ((XSysMon_GetStatus(InstancePtr) & XSM_SR_EOS_MASK) != XSM_SR_EOS_MASK);

	if (READDATA_DBG != 0)
		xil_printf("Capturing XADC Data...\r\n");

	for (Channel=0; Channel<32; Channel++) {
		if (((1 << Channel) & XADC_CHANNELS) != 0) {
			if (READDATA_DBG != 0)
				xil_printf("Capturing Data for Channel %d\r\n", Channel);
			RawData[Channel] = XSysMon_GetAdcData(InstancePtr, Channel);
			//printf("Read %u for Channel %u\r\n", RawData[Channel], Channel);
		}
	}
	return XADC_CHANNELS; // return a high bit for each channel successfully read
}

float Xadc_RawToVoltage(u16 Data, u8 Channel) {
	float FloatData;
	float Scale;

	//printf("raw: %u\r\n", Data);

	switch (Channel) {
	case 3: // VP/VN (Cora Dedicated Analog Input)
	case 16: // AUX0 (Cora A8/A9 Diff. Analog Input)
	case 24: // AUX8 (Cora A10/A11 Diff. Analog Input)
	case 28: Scale = 1.0; break; // AUX12 (Cora A6/A7 Diff. Analog Input)
	case 17: // AUX1 (Cora A0 Single-Ended Analog Input)
	case 21: // AUX5 (Cora A4 Single-Ended Analog Input)
	case 22: // AUX6 (Cora A2 Single-Ended Analog Input)
	case 25: // AUX9 (Cora A1 Single-Ended Analog Input)
	case 29: // AUX13 (Cora A5 Single-Ended Analog Input)
	case 31: Scale = 3.3; break; // AUX15 (Cora A3 Single-Ended Analog Input)
	default: Scale = 0.0;
	}
	if (Test_Bit(Data, 15)) {
		FloatData = -Scale;
		Data = ~Data + 1;
	} else
		FloatData = Scale;
	FloatData *= (float)Data / (float)0xFFFF;
	return FloatData;
}

float fixNegatives(float orig) {
	if (orig < 0)
		return 0.0;
	else
		return orig;
}
